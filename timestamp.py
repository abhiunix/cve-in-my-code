import datetime
from dateutil import tz
import sqlite3

def current_timestamps_unix(): #return current_timestamp
    current_timestamp = datetime.datetime.now().timestamp()
    #print("current timestamp(unix/epoch): ", current_timestamp)
    return current_timestamp

def convert_unix_to_iso(current_timestamp): #return iso8601_timestamp
    dt = datetime.datetime.fromtimestamp(current_timestamp)
    iso8601_timestamp = dt.isoformat()
    #print("iso8601_timestamp: ", iso8601_timestamp)
    return iso8601_timestamp

def convert_iso_to_unix(iso_timestamp): #return ist_timestamp, unix_timestamp
    utc_datetime = datetime.datetime.strptime(iso_timestamp, "%Y-%m-%dT%H:%M:%S.%f")
    utc_timezone = tz.gettz('UTC')
    utc_datetime = utc_datetime.replace(tzinfo=utc_timezone)
    gmt_datetime = utc_datetime.astimezone(utc_timezone)  # Convert to GMT timezone
    unix_timestamp = int(gmt_datetime.timestamp())
    ist_timestamp = gmt_datetime.strftime("%Y-%m-%d %H:%M:%S")
    #print("IST Timestamp:", ist_timestamp)
    return ist_timestamp, unix_timestamp

def store_timestamp_in_db(current_timestamp, iso_timestamp, unix_timestamp_ist):
    conn = sqlite3.connect('cve-database.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS timestamps (timestamp_ist TEXT, timestamp_unix TEXT, timestamp_iso TEXT)")
    cursor.execute("INSERT INTO timestamps (timestamp_unix, timestamp_iso, timestamp_ist) VALUES (?, ?, ?)", (str(current_timestamp), str(iso_timestamp), str(unix_timestamp_ist)))
    conn.commit()
    conn.close()

def main():
    current_timestamp = current_timestamps_unix()
    iso_timestamp = convert_unix_to_iso(current_timestamp)
    #print("ISO-8601 timestamp:", iso_timestamp)
    unix_timestamp = convert_iso_to_unix(iso_timestamp)
    #print("Unix timestamp:", unix_timestamp[1], "and IST is", unix_timestamp[0])
    store_timestamp_in_db(current_timestamp, iso_timestamp, unix_timestamp[0]) 
    #_hour_before = str(convert_unix_to_iso(get_time_x_hours_before(current_timestamps_unix(), 1)))
    return iso_timestamp

def get_time_x_hours_before(current_timestamp, x_hour_before):
    current_datetime = datetime.datetime.fromtimestamp(current_timestamp)
    time_x_hours_before = current_datetime - datetime.timedelta(hours=x_hour_before)
    x_hour_before_timestamp = time_x_hours_before.timestamp()
    return x_hour_before_timestamp


if __name__ == "__main__":
    main()
    # print("Time before 1 hour:"+ str(get_time_x_hours_before(current_timestamps_unix(), 1)))
    # print("Time before 1 hour (in iso):"+ str(convert_unix_to_iso(get_time_x_hours_before(current_timestamps_unix(), 1))))