import requests
import json
from dotenv import load_dotenv
import os
import subprocess

load_dotenv()
github_token = os.getenv("github_token")
webhook_url = os.getenv("webhook_url")
health_check_webhook = os.getenv("health_check_webhook")

def send_slack_notification(webhook_url, message):
    payload = {
        'text': message
    }
    response = requests.post(webhook_url, json=payload)
    if response.status_code != 200:
        print(f"Failed to send Slack notification. Error: {response.status_code} - {response.text}")


def search_in_github(search_keywords, cve_id):
    headers = {"X-GitHub-Api-Version": "2022-11-28",
            "Accept": "application/vnd.github+json",
            "Authorization": f"Bearer {github_token}"
            }
    base_url = "https://api.github.com/search/code?type=code&sort=created&order=asc&q=org:curefit%20"
    search_url= f"{base_url}\"{search_keywords}\""
    print("Search API: "+search_url)
    response = requests.get(search_url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        # print(data)
        with open('searchResponse.json', 'w') as file:
            json.dump(response.json(), file)
        Total_count = subprocess.check_output(f"cat searchResponse.json| jq .total_count", shell=True).decode().strip()
        html_url = subprocess.check_output(f"cat searchResponse.json| jq -r '.items[].html_url'", shell=True).decode().strip()
        #print(type(Total_count))
        message = "<@U0447F52MPU> Reference for {} in our code:\n".format(cve_id)
        
        message += f"Total number of files: {Total_count}\nDescription: \n{html_url}\n\n"
        if (int(Total_count) > 0):
            send_slack_notification(webhook_url, message)
        else:
            print("Product Not Found!")
            return
    elif response.status_code != 200:
         print(f"Something wrong with the Github API. Error: {response.status_code} - {response.text}")
         debug(health_check_webhook, "<@U0447F52MPU> Something wrong with the Github API. Error: "+str({response.status_code} - {response.text})+"\nerror_URL: "+str(search_url))
         debug(health_check_webhook, "Direct Search URL: "+ f"https://github.com/search?q=org:curefit%20\"{search_keywords}\"")
    else:
        print(f"Error: {response.status_code} - {response.reason}")

    
def main():
    #search_keywords = ["jsonwebtoken", ""]
    #search_in_github(search_keywords)
    return

def debug(webhook_url, message):
    payload = {
        'text': message
    }
    response = requests.post(webhook_url, json=payload)
    if response.status_code != 200:
        print(f"Failed to send Slack notification. Error: {response.status_code} - {response.text}")

if __name__ == "__main__":
    main()