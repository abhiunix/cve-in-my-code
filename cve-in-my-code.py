import requests
import json
import sqlite3
import subprocess
import datetime
import pytz
import timestamp
from dotenv import load_dotenv
import os

#author: Abhijeet Singh (@abhiunix)

script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

load_dotenv()
webhook_url = os.getenv("webhook_url")
health_check_webhook = os.getenv("health_check_webhook")

command = f'curl -X POST -H "Content-type: application/json" --data \'{{"text":"cve-in-my-code is healthy! -----------> stage"}}\' {health_check_webhook} --silent'
output = subprocess.check_output(command, shell=True).decode().strip()
health_check_url = output.strip()

def debug(webhook_url, message):
    payload = {
        'text': message
    }
    response = requests.post(webhook_url, json=payload)
    if response.status_code != 200:
        print(f"Failed to send Slack notification. Error: {response.status_code} - {response.text}")

def get_last_timestamp():
    conn = sqlite3.connect('cve-database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT timestamp_iso, timestamp_ist FROM timestamps WHERE ROWID = (SELECT MAX(ROWID) FROM timestamps)")
    result = cursor.fetchone()  # Fetch the first row from the result
    if result:
        last_run_iso = result[0]
        #print("Last run timestamp:", last_run[0])
    else:
        print("No previous timestamps found.")
    conn.close()
    return last_run_iso

def download_data():
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0/?pubStartDate={last_run_at}&pubEndDate={current_time_in_iso}&resultsPerPage=2000"  
    print(url)
    response = requests.get(url)
    #debug(health_check_webhook, "url="+str(url))
    if response.status_code == 200:
        data = response.json()
        print(data)
        with open("downloaded_json_file.json", "w") as file:
            json.dump(data, file)
        print(f"Downloaded cve data from {last_run_at} to {current_time_in_ist} in downloaded_json_file.json")
    elif response.status_code != 200:
         print(f"Something wrong with the nvd API. Error: {response.status_code} - {response.text}")
         debug(health_check_webhook, "Something wrong with the nvd API. Error: "+str({response.status_code} - {response.text})+"\nerror_URL: "+str(url))

    else:
        print(f"Error: {response.status_code} - {response.reason}")

def send_slack_notification(webhook_url, message):
    payload = {
        'text': message
    }
    response = requests.post(webhook_url, json=payload)
    if response.status_code != 200:
        print(f"Failed to send Slack notification. Error: {response.status_code} - {response.text}")

def insert_into_db(webhook_url):
    conn = sqlite3.connect("cve-database.db") 
    cursor = conn.cursor()
    newly_added_cves=0
    new_entries = []

    for i in range(number_of_cves):
        
        cve_id = subprocess.check_output(f"cat downloaded_json_file.json | jq -r '.vulnerabilities[{i}].cve.id'", shell=True).decode().strip()
        base_score = subprocess.check_output(f"cat downloaded_json_file.json | jq '.vulnerabilities[{i}].cve.metrics | if has(\"cvssMetricV30\") then .cvssMetricV30[].cvssData.baseScore else empty end'", shell=True).decode().strip()
        cve_desc = subprocess.check_output(f"cat downloaded_json_file.json | jq -r '.vulnerabilities[{i}].cve.descriptions[].value'", shell=True).decode().strip()
        cve_pub_date = subprocess.check_output(f"cat downloaded_json_file.json | jq -r '.vulnerabilities[{i}].cve.published'", shell=True).decode().strip()
        reference_link = subprocess.check_output(f"cat downloaded_json_file.json| jq -r '.vulnerabilities[{i}].cve.references[].url'", shell=True).decode().strip()

        dt = datetime.datetime.strptime(cve_pub_date, "%Y-%m-%dT%H:%M:%S.%f")
        utc_timezone = pytz.timezone("UTC")
        dt_utc = utc_timezone.localize(dt)
        ist_timezone = pytz.timezone("Asia/Kolkata")
        dt_ist = dt_utc.astimezone(ist_timezone)
        ist_timestamp = dt_ist.strftime("%Y-%m-%d %H:%M:%S")

        cursor.execute("CREATE TABLE IF NOT EXISTS cve (cve_id TEXT PRIMARY KEY, base_score TEXT, cve_desc TEXT, cve_pub_date_ist TEXT, cve_pub_date TEXT, reference_link TEXT)")
        
        insert_data = "INSERT OR IGNORE INTO cve (cve_id, base_score, cve_desc, cve_pub_date_ist, cve_pub_date, reference_link) VALUES (?, ?, ?, ?, ?, ?)"
        cursor.execute(insert_data, (cve_id, base_score, cve_desc, ist_timestamp, cve_pub_date, reference_link))
        
        if cursor.rowcount > 0:
            new_entries.append((cve_id, base_score, cve_desc, ist_timestamp, cve_pub_date, reference_link))

    conn.commit()
    cursor.close()
    conn.close()

    if len(new_entries) > 0:
        webhook_url = f"{webhook_url}"  
        
        for entry in new_entries:
            newly_added_cves=newly_added_cves+1
            message = "New CVE entries added:\n"
            cve_id, base_score, cve_desc, cve_pub_date, ist_timestamp, reference_link = entry
            message += f"{cve_id}\nBase Score: {base_score}\nDescription: {cve_desc}\nPublication Date: {cve_pub_date}\nReferences: {reference_link}\n\n"
            send_slack_notification(webhook_url, message)

    print(f"Total number of newly added CVEs are:", newly_added_cves)
    return newly_added_cves
    

if __name__ == "__main__":
    last_run_at = get_last_timestamp()
    #last_run_at = ['2023-06-24T00:58:48.144931', '2023-06-16 00:58:48']
    #debug(health_check_webhook, "script_dir="+script_dir)
    current_time_in_iso = timestamp.convert_unix_to_iso(timestamp.current_timestamps_unix())
    current_time_in_ist = timestamp.convert_iso_to_unix(current_time_in_iso)[0]
    print("Current Timestamp in ISO:",current_time_in_iso + "\nLast run at_iso:", last_run_at)

    #running_for_last_time_difference
    # download_data()
    # number_of_cves = subprocess.check_output("cat downloaded_json_file.json| jq -r '.vulnerabilities[].cve.id'", shell=True).decode().strip()
    # number_of_cves = len(number_of_cves.splitlines())
    # print(f"Number of CVEs found in the give date range are {number_of_cves}")  
    # #insert_into_db(webhook_url)
    # newly_added_cves = insert_into_db(webhook_url)
    # debug(health_check_webhook, "Total number of newly added CVEs as per the cron set up: "+str(newly_added_cves))  

    #running_for_last_24_hour_time_from current _time
    print("\n")
    last_run_at = str(timestamp.convert_unix_to_iso(timestamp.get_time_x_hours_before(timestamp.current_timestamps_unix(), 14)))
    download_data()
    number_of_cves = subprocess.check_output("cat downloaded_json_file.json| jq -r '.vulnerabilities[].cve.id'", shell=True).decode().strip()
    number_of_cves = len(number_of_cves.splitlines())
    print(f"Number of CVEs found in the give date range are {number_of_cves}")  
    #insert_into_db(webhook_url)
    newly_added_cves = insert_into_db(webhook_url)
    debug(health_check_webhook, "Total number of newly added CVEs identified in past 24 hour: "+str(newly_added_cves)) 

    timestamp.main()